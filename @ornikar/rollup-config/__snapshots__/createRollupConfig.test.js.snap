// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fixtures test-monorepo 0 1`] = `
"const sayHello = (name = 'world') => {
  console.log(\`hello \${name}\`);
};

export { sayHello };
"
`;

exports[`fixtures test-monorepo 1 1`] = `
"var sayHello = function () {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'world';
  console.log(\\"hello \\".concat(name));
};

export { sayHello };
"
`;

exports[`fixtures test-monorepo 2 1`] = `
"const sayHello = (...names) => {
  console.log(\`hello \${names.join(', ')}\`);
};
const testSpread = ({
  name,
  ...rest
} = {}) => {
  console.log({
    name,
    ...rest
  });
};

export { sayHello, testSpread };
"
`;

exports[`fixtures test-monorepo 3 1`] = `
"import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';

var _excluded = [\\"name\\"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var sayHello = function () {
  for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
    names[_key] = arguments[_key];
  }

  console.log(\\"hello \\".concat(names.join(', ')));
};
var testSpread = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      name = _ref.name,
      rest = _objectWithoutProperties(_ref, _excluded);

  console.log(_objectSpread({
    name: name
  }, rest));
};

export { sayHello, testSpread };
"
`;
